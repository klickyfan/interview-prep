using System.IO;
using System;
using System.Collections.Generic;
using System.Linq; // for third method

class Program
{
    // remove duplicates
    
    static void Main()
    {
        int[] testSortedArray1 = new int[] { 1, 1, 2, 2, 2, 3, 3, 4, 5, 6 };
        int[] testSortedArray2 = new int[] { 2, 2, 2, 2, 2 };
        
        RemoveDuplicatesFromSortedArrayShiftMethod(testSortedArray1);
        RemoveDuplicatesFromSortedArrayShiftMethod(testSortedArray2);
        
        RemoveDuplicatesFromSortedArrayQueueMethod(testSortedArray1);
        RemoveDuplicatesFromSortedArrayQueueMethod(testSortedArray2);
        
        RemoveDuplicatesFromSortedArrayLinqMethod(testSortedArray1);
        RemoveDuplicatesFromSortedArrayLinqMethod(testSortedArray2);
        
        RemoveDuplicatesFromSortedArrayHashSetMethod(testSortedArray1);
        RemoveDuplicatesFromSortedArrayHashSetMethod(testSortedArray2);
    }
    
    static void RemoveDuplicatesFromSortedArrayShiftMethod(int[] sortedArray)
    {
        // Note that this method does not change the sortedArray as seen
        // outside of this method. That is because sorted array is a reference
        // (arrays being reference variables) that has been passed by value.
        
        // O(n) time; O(n) space (for copy to list to enable use of RemoveRange)
                
        Console.WriteLine(
            "original sorted array: {0}", 
            string.Join(", ", sortedArray));
 
        if (sortedArray.Length > 1) 
        {
            List<int> sortedList = new List<int>(sortedArray);
            
            int indexLastUnique = 0;
            
            for (int i = 1; i < sortedList.Count; i++)
            {
                if (sortedList[indexLastUnique] != sortedList[i])
                {
                    sortedList[indexLastUnique + 1] = sortedList[i];
                    indexLastUnique += 1;
                }
            }
            
            sortedList.RemoveRange(indexLastUnique + 1, sortedList.Count - indexLastUnique - 1);
            
            sortedArray = sortedList.ToArray();
        }
        
        Console.WriteLine(
            "sorted array without duplicates: {0}\n",  
            string.Join(", ", sortedArray));
    }
    
    static void RemoveDuplicatesFromSortedArrayQueueMethod(int[] sortedArray)
    {
        // Note that this method (like the last one) does not change the 
        // sortedArray as seen outside of this method. That is because sorted 
        // array is a reference (arrays being reference variables) that has been 
        // passed by value.
        
        // O(n) time; O(n) space for use of queue
        
        Console.WriteLine(
            "original sorted array: {0}", 
            string.Join(", ", sortedArray));
 
        if (sortedArray.Length > 1) 
        {
            Queue<int> temp = new Queue<int>();
            
            temp.Enqueue(sortedArray[0]);
            
            for (int i = 1; i < sortedArray.Length; i++)
            {
                if (sortedArray[i] != sortedArray[i-1])
                {
                    temp.Enqueue(sortedArray[i]);
                }
            }
            
            sortedArray = temp.ToArray();
        }
        
        Console.WriteLine(
            "sorted array without duplicates: {0}\n",  
            string.Join(", ", sortedArray));
    }
    
    static void RemoveDuplicatesFromSortedArrayLinqMethod(int[] sortedArray)
    {
         Console.WriteLine(
            "original sorted array: {0}", 
            string.Join(", ", sortedArray));
            
        Console.WriteLine(
            "sorted array without duplicates: {0}\n",  
            string.Join(", ", sortedArray.Distinct().ToArray()));
 
    }
    
    static void RemoveDuplicatesFromSortedArrayHashSetMethod(int[] sortedArray)
    {
        /* works because hash sets don't allow duplicates */
        
         Console.WriteLine(
            "original sorted array: {0}", 
            string.Join(", ", sortedArray));
            
        Console.WriteLine(
            "sorted array without duplicates: {0}\n",  
            string.Join(", ", new HashSet<int>(sortedArray)));
 
    }
}
