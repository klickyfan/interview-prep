using System.IO;
using System;
using System.Linq;
using System.Collections.Generic;

/*
sort a string (2 ways)

reverse a string (3 ways)

count words in a sentence

reverse a sentence ("bob likes dogs" -> "dogs likes bob") (2 ways)

check if two strings are anagrams

print duplicate characters in a string (two ways)

find the minimum value in a list

find the maximum value in a list

return distinct values from a list (i.e. "1 3 5 3 7 3 1 1 5" -> "1 3 5 7")

return distinct values and their counts (i.e. the list above becomes "1(3) 3(3) 5(2) 7(1)")

find pairs in a list with a given sum

sort an array descending (2 ways)

find most common element in a list

calculate a remainder (given a numerator and denominator)

given a string containing an expression (only variables, +, and -) and a set of variable/value 
pairs (i.e. a=1, b=7, c=3, d=14) return the result of the expression ("a + b+c -d" would be -3)

determine if a number is a power of 2

check that all alphabet letters are present in a phrase
*/

class Program
{
    static void Main()
    {
        /* test data */
        string testString0 = "this is a test string";
        
        string testString1 = "aabcdd12334590   ";
        
        List<int> testIntList = new List<int>(){ 1, 4, -1, 9, 11, 3, 100, -7, 1, 3, 3};
        
        int[] testIntArray = new int[] { 1, 3, -20, 10, 4, 7, 9, 5, 12, -8, -10, -4, 7, -20, 7 };
        
        int numerator = 412;
        int denominator = 81;
        
        string expression = "a + b+c -d";
        Dictionary<char, int> variableDictionary = 
            new Dictionary<char, int> { {'a', 1}, {'b', 7}, {'c', 9}, {'d', 14} };
            
        int number = 10;
        
        SortString(testString0);
        SortStringUsingLinq(testString0);
        
        ReverseString(testString0);
        ReverseStringUsingLinq(testString0);
        ReverseStringUsingLoop(testString0);
        
        string reversedString = RecursiveReverseString(testString0);
	      Console.WriteLine("testString: {0}, reversedString: {1}", testString0, reversedString);
	    
	      CountWords(testString0);
        
        ReverseSentence(testString0); 
        ReverseSentenceUsingLinq(testString0); 
        
        CheckIfAnagrams("iceman", "cinema");
		    CheckIfAnagrams("icicle", "cinema");
		
		    PrintDuplicateCharactersBySorting(testString1);
		    PrintDuplicateCharactersUsingHashSet(testString1);
       
        GetMinOrMax(testIntList);
        
        ExtractDistinct(testIntList);
        ExtractDistinctWithCounts(testIntList);
        
        PairsWithSum(testIntArray, 5);
        
        SortArrayDescending(testIntArray);
		    SortArrayDescendingUsingLinq(testIntArray);
		
		    FindMajorityElement(testIntArray);
        
        GetRemainder(numerator, denominator);
        
        SolveExpression(expression, variableDictionary);
            
        DetermineIfPowerOf2(number);
        
        CheckForWholeAlphabetInPhrase("The quick brown fox jumps over a lazy");
        CheckForWholeAlphabetInPhrase("The quick brown fox jumps over a lazy dog.");
    }
    
    static void SortString(string inputString)
    {
        char[] charArrayForSort = inputString.ToCharArray();
        Array.Sort(charArrayForSort); // in place sort using static Sort method of Array
        string sortedString1 = new string(charArrayForSort);
        sortedString1 = sortedString1.Trim();
        Console.WriteLine(
             "inputString: {0}, sortedString1: {1}", inputString, sortedString1);
    }
    
    static void SortStringUsingLinq(string inputString)
    {
        string sortedString2 = new string(inputString.OrderBy(c => c).ToArray()).Trim();
        
        Console.WriteLine(
             "inputString: {0}, sortedString2: {1}", inputString, sortedString2);
    }
    
    static void ReverseString(string inputString)
    {
        char[] charArrayForReverse = inputString.ToCharArray();
        Array.Reverse(charArrayForReverse); // in place reverse using static Reverse method of Array
        string reversedString1 = new string(charArrayForReverse);
       
        Console.WriteLine(
            "inputString: {0}, reversedString: {1}", inputString, reversedString1);
    }
    
    static void ReverseStringUsingLinq(string inputString)
    {
        string reversedString = new string(inputString.Reverse().ToArray());
        
        Console.WriteLine(
            "inputString: {0}, reversedString: {1}", inputString, reversedString);
    }
    
    static void ReverseStringUsingLoop(string inputString)
    {
        Console.Write(
            "inputString: {0}, reversedString: ", inputString);
            
        for(int i = inputString.Length - 1; i >= 0; i--)
		    {
			      Console.Write(inputString[i]);
		    }
        
		    Console.WriteLine();
    }
    
    static string RecursiveReverseString(string inputString)
	  {
		    if (string.IsNullOrEmpty(inputString))
			      return "";
		
		    return inputString[inputString.Length - 1] + RecursiveReverseString(inputString.Substring(0, inputString.Length-1));		
    }
	
	  static void CountWords(string inputString)
	  {
		    char[] separators = " ".ToCharArray();
		    string[] words = inputString.Split(separators, StringSplitOptions.RemoveEmptyEntries);
		
		    Console.WriteLine("words in \"{0}\": {0}", inputString, words.Length);
	  }
    
    static void ReverseSentence(string inputString)
    {
        string[] splitString = inputString.Split(' ');
        
        string reversedSentence = string.Empty;
        foreach(string s in splitString.Reverse())
        {
            reversedSentence += s;
            reversedSentence += " ";
        }
        
        Console.WriteLine(
            "inputString: {0}, reversedSentence: {1}", 
            inputString, reversedSentence.Trim());
    }
    
    static void ReverseSentenceUsingLinq(string inputString)
    {     
        string reversedSentence = 
            new string(inputString.Split(' ').Aggregate((a, b) => b + " " + a).ToArray());
            
        Console.WriteLine(
            "inputString: {0}, reversedSentence: {1}", 
            inputString, reversedSentence.Trim());
    }
    
    static void CheckIfAnagrams(string string0, string string1)
	  {
		    string sortedString0 = new string(string0.OrderBy(c=>c).ToArray());
		    string sortedString1 = new string(string1.OrderBy(c=>c).ToArray());
		
		    if (sortedString0 == sortedString1) 
			      Console.WriteLine("{0} and {1} are anagrams", string0, string1);
		    else
			      Console.WriteLine("{0} and {1} are not anagrams", string0, string1);
	  }
    
    static void PrintDuplicateCharactersBySorting(string inputString)
	  {
	      Console.Write("duplicate characters in \"{0}\": ", inputString);
		    string sortedString = new string(inputString.OrderBy(c=>c).ToArray());
	 
        char lastChar = sortedString[0];
		    for (int i = 1; i < sortedString.Length; i++)
		    {
			      char currentChar = sortedString[i];
			      if (currentChar == lastChar) 
			      {
				        // character is a duplicate
				        Console.Write(currentChar);
			      }
			      else
			      {
				        lastChar = currentChar;
			      }
		    }
		
		    Console.WriteLine();
    }
	
    static void PrintDuplicateCharactersUsingHashSet(string inputString)
	  {
        Console.Write("duplicate characters in \"{0}\": ", inputString);
		    HashSet<char> set = new HashSet<char>();
	 	    for (int i = 0; i < inputString.Length; i++)
		    {
			      char currentChar = inputString[i];
			      if (set.Contains(currentChar))
			      {
				        Console.Write(currentChar);
			      }
			      else
			      {
				        set.Add(currentChar);
			      }		
		    }
		    Console.WriteLine();
    }
    
    static void GetMinOrMax(List<int> inputList)
    {
        /* find minimum value in a list */
        
        int minValue = inputList.Min();
        
        Console.WriteLine(
            "inputList's min value: {0}", minValue);
       
        /* find maximum value in a list */
        
        int maxValue = inputList.Max();
        
        Console.WriteLine(
            "inputList's max value: {0}", maxValue);
    }
    
    static void ExtractDistinct(List<int> inputList)
    {
        List<int> listWithNoDuplicates = inputList.Distinct().ToList();
        
        Console.WriteLine(
            "inputList's distinct values: {0}", String.Join(", ", listWithNoDuplicates));  
    }
    
    static void ExtractDistinctWithCounts(List<int> inputList)
    {
        Dictionary<int, int> dictionary = new Dictionary<int, int>();
        foreach(int i in inputList)
        {
            if (dictionary.ContainsKey(i))
            {
                dictionary[i]++;
            }
            else
            {
                dictionary.Add(i, 1);
            }
        }
        
        Console.WriteLine("inputList's distinct values and their counts: ");
        foreach(KeyValuePair<int, int> pair in dictionary)
        {
            Console.Write($"{pair.Key} ({pair.Value}) ");
        }
        Console.WriteLine();
    }
    
    static void PairsWithSum(int[] inputArray, int sum)
	  {
		    HashSet<int> set = new HashSet<int>();
		
		    for (int i = 0; i < inputArray.Length; i++)
		    {
			      int addend0 = inputArray[i];
			      int addend1 = sum - addend0;
			      if (set.Contains(addend1))
					      Console.WriteLine("{0} {1}", addend0, addend1);
			      else
				        set.Add(inputArray[i]);		
		    }
    }
	
	  static void SortArrayDescending(int[] inputArray)
	  {
		    // making copy so test string is not modified
		    int[] inputArrayCopy = new int[inputArray.Length];
		    inputArray.CopyTo(inputArrayCopy, 0);
		
		    Console.WriteLine("unsorted array: {0}", string.Join(", ", inputArrayCopy));
		    Array.Sort(inputArrayCopy);
		    Array.Reverse(inputArrayCopy);
		    Console.WriteLine("sorted array:   {0}", string.Join(", ", inputArrayCopy));
	  }
	
	  static void SortArrayDescendingUsingLinq(int[] inputArray)
	  {
		    Console.WriteLine("unsorted array: {0}", string.Join(", ", inputArray));
		    inputArray = inputArray.OrderByDescending(c=>c).ToArray();
		    Console.WriteLine("sorted array:   {0}", string.Join(", ", inputArray));
	  }
	
	  static void FindMajorityElement(int[] inputArray)
	  {
		    Dictionary<int, int> dictionary = new Dictionary<int, int>();
		
		    int majorityKey = 0;
		    int majorityValue = 1;
		
		    for (int i = 0; i < inputArray.Length; i++)
		    {
			      int currentKey = inputArray[i];
			
			      // Console.WriteLine("currentKey: {0}, majorityKey: {1}, majorityValue: {2}", currentKey, majorityKey, majorityValue);

			      if (dictionary.ContainsKey(currentKey))
			      {
				        dictionary[currentKey]++;
				        if (dictionary[currentKey] > majorityValue)
				        {
					          majorityValue = dictionary[currentKey];
					          majorityKey = currentKey;
				        }				
            }
            else
			      {
				        dictionary.Add(currentKey, 1);
			      }
		    }
		
		    Console.WriteLine("{0} is the majority element, (appears {1} times)", majorityKey, majorityValue);
	  }
	
	  static void GetRemainder(int numerator, int denominator)
    {
        int remainder = numerator % denominator;
        
        Console.WriteLine("remainder of {0}/{1}: {2}", numerator, denominator, remainder);
    }
    
    static void SolveExpression(string expression, Dictionary<char, int> variableDictionary)
    {
        int total = 0;
        char lastOperator = '+';

        for (int i = 0; i < expression.Length; i++)
        {
            char currentCharacter = expression[i];
            if (variableDictionary.ContainsKey(currentCharacter))
            {
                if (lastOperator == '+')
                    total+= variableDictionary[currentCharacter];
                else
                    total-= variableDictionary[currentCharacter];
            } 
            else if (currentCharacter == '+' || currentCharacter == '-')
            {
                lastOperator = currentCharacter;
            }
            else
            {
                // do nothing; ignore other character in expression
            }
        }
        
        Console.WriteLine("expression total: {0}", total);
    }
    
    static void DetermineIfPowerOf2(int number)
    {
        // the bitwise and of a power of two and the number one less will always equal 0
        if ((number & (number - 1)) == 0) 
        { 
            Console.WriteLine("{0} is a power of 2", number);
        }
        else
        {
            Console.WriteLine("{0} is not a power of 2", number);
        }
        
        // We could also repeatedly mod and divide by two. If at any point mod != 0 we 
        // don't have a power of 2.
        //(See http://javabypatel.blogspot.com/2016/03/check-if-number-is-power-of-two.html.)
    }
    
    static void CheckForWholeAlphabetInPhrase(string phrase) 
    {
        // assumption: only care about 26 lower case (ASCII) letters
        
        bool[] letterPresent = new bool[26];
        
        /* remove whitespace from phrase */
        string doctoredPhrase = new string(phrase.Where(letter => !Char.IsWhiteSpace(letter)).ToArray());
        
        doctoredPhrase = doctoredPhrase.ToLower();
        
        foreach(char letter in doctoredPhrase)
        {
            
            int index = (int)letter % 32 - 1; // neat trick to get index 0-25 of char
            // Console.WriteLine("{0} {1} {2}", letter, (int) letter, index);
            letterPresent[index] = true;
        }
        
        for (int i = 0; i < 26; i++)
        {
            if (letterPresent[i] == false)
            {
                Console.WriteLine("phrase \"{0}\" is missing some letters (the first one is {1})", phrase, (char) (i + 97));
                return;
            }
        }
        
        Console.WriteLine("phrase \"{0}\" has all letters", phrase);
    }
}
